system(gdal_calc_str)
devtools:::install_github(“duncantl/RWordPress”)
devtools::install_github(“duncantl/RWordPress”)
devtools::install_github("duncantl/RWordPress")
install.packages("XML")
sp_list = c("Carassius auratus","Alosa sapidissima","Micropterus salmoides","Pimephales promelas","Salmo salar","Salvelinus fontinalis","Alopecurus geniculatus","Astronotus ocellatus","Trachemys scripta scripta","Procambarus clarkii","Gambusia affinis","Perca flavescens","Trachemys scripta elegans","Pacifastacus leniusculus","Pseudacris regilla","Rana aurora","Esox masquinongy","Elodea canadensis","Elodea nuttallii","Didymosphenia geminata","Cyprinus carpio","Misgurnus anguillicaudatus","Cipangopaludina chinensis","Corbicula fluminea","Potamopyrgus antipodarum","Butomus umbellatus","Egeria densa","Myriophyllum aquaticum","Myriophyllum spicatum","Pectinatella magnifica","Ameiurus melas","Ameiurus natalis","Ameiurus nebulosus","Lepomis gibbosus","Lepomis macrochirus","Micropterus dolomieu","Piaractus brachypomus","Pomoxis nigromaculatus","Salmo trutta","Tinca tinca","Craspedacusta sowerbyi","Callitriche stagnalis","Myriophyllum heterophyllum","Nymphaea odorata","Nymphoides peltata","Potamogeton crispus","Azolla filiculoides","Rana catesbeiana","Rana clamitans","Channa maculata","Salvelinus trutta X S. namaycush hybrid","Bellamya chinensis","Cipangopaludina chinensis malleata","Viviparus japonicus","Alisma lanceolatum","Azolla caroliniana","Nymphaea mexicana","Lithobates catesbeianus","Ctenopharyngodon idella","Ictalurus furcatus","Oreochromis niloticus","Pterygoplichthys disjunctivus","Pylodictis olivaris","Cabomba caroliniana","Eichhornia crassipes","Hydrilla verticillata [monoecious]","Lithobates clamitans","Notophthalmus viridescens","Xenopus laevis","Stephanella hina","Argulus japonicus","Bosmina coregoni","Caecidotea laticaudata","Caecidotea racovitzai","Crangonyx floridanus","Crangonyx pseudogracilis","Exopalaemon modestus","Faxonius sanbornii","Faxonius virilis","Harpacticella paradoxa","Lernaea cyprinacea","Limnoithona sinensis","Limnoithona tetraspina","Procambarus acutus acutus","Pseudodiaptomus forbesi","Sinocalanus doerri","Urnatella gracilis","Ambloplites rupestris","Ameiurus catus","Colossoma macropomum","Culaea inconstans","Cyprinodon variegatus","Esox americanus vermiculatus","Esox lucius x E. masquinongy","Fundulus diaphanus","Ictalurus punctatus","Lepomis cyanellus","Lepomis gulosus","Lota lota","Micropterus punctulatus","Morone chrysops","Morone saxatilis","Notemigonus crysoleucas","Noturus gyrinus","Novumbra hubbsi","Oncorhynchus aguabonita","Oncorhynchus clarkii henshawi","Oncorhynchus clarkii lewisi","Oncorhynchus masou","Osphronemus goramy","Pomoxis annularis","Rhinogobius brunneus","Richardsonius balteatus","Salmo salar sebago","Sander vitreus","Xiphophorus maculatus","Cordylophora caspia","Radix auricularia","Azolla cristata","Hydrocharis morsus-ranae","Myriophyllum x spicatum","Sagittaria graminea graminea","Sagittaria rigida","Caiman crocodilus","Chelydra serpentina","Duttaphrynus melanostictus","Eleutherodactylus coqui","Rhinella marina","Bythotrephes longimanus","Cercopagis pengoi","Daphnia lumholtzi","Hemimysis anomala","Alosa aestivalis","Alosa pseudoharengus","Belonesox belizanus","Carassius carassius","Channa argus","Chitala ornata","Cichla ocellaris","Cichlasoma bimaculatum","Clarias batrachus","Coregonus maraena","Cyprinella lutrensis","Gambusia holbrooki","Gymnocephalus cernua","Hemichromis letourneuxi","Herichthys cyanoguttatus","Hypomesus nipponensis","Hypophthalmichthys nobilis","Lates niloticus","Lepomis microlophus","Menidia beryllina","Morone americana","Neogobius melanostomus","Oreochromis aureus","Oreochromis mossambicus","Parachromis managuensis","Poecilia latipinna","Poecilia reticulata","Pterygoplichthys multiradiatus","Pterygoplichthys pardalis","Pygocentrus nattereri","Sarotherodon melanotheron","Scardinius erythrophthalmus","Tilapia mariae","Tilapia sparrmanii","Tilapia zillii","Bithynia tentaculata","Dreissena polymorpha","Dreissena rostriformis bugensis","Melanoides tuberculatus","Pomacea canaliculata","Tarebia granifera","Alternanthera philoxeroides","Hydrilla verticillata [dioecious]","Hygrophila polysperma","Ludwigia peruviana","Pistia stratiotes")
library(ritis, verbose = F, quietly = T, warn.conflicts = F)
library(taxize, verbose = F, quietly = T, warn.conflicts = F)
library(tidyverse, verbose = F, quietly = T, warn.conflicts = F)
library(gsheet, verbose = F, quietly = T, warn.conflicts = F)
# get required TSNs to efficiently process species names using ITIS
t0 <- unique(bind_rows(get_tsn_(searchterm = sort(sp_list),accepted = F, messages = T)))
t0
View(t0)
unique(t0$nameUsage)
t0 <- t0[, c('nameUsage','scientificName','tsn')]
# drop names that aren't in the original search list or are 'accepted'. this speeds up synonym search time.
t <- t0[(t0$scientificName %in% sp_list | t0$nameUsage == 'accepted' | t0$nameUsage == 'valid'),]
t
# drop hybrids
t <- t[!t$scientificName %in% grep("X", t$scientificName, value = T, ignore.case = F),]
# drop one word terms...too general
t <- t[str_count(t$scientificName, pattern = '\\w+') > 1,]
t
# find synonyms using function from the taxize library (make sure to have most recent build!)
s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
View(t)
sp_list
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0 <- synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))
t[t$scientificName=='Gambusa affinis',]
t[t$tsn==165878,]
t[t$scientificName=='Gambusia affinis',]
synonyms(165878, db='itis')
t$tsn
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0 <- synonyms_df(synonyms(t$tsn[1:5], db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0 <- synonyms_df(synonyms(t$tsn[1:5,], db = 'itis', ask=F))
t$tsn[1:5]
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0 <- synonyms_df(synonyms(t$tsn[1:5], db = 'itis', ask=F))
s0
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0 <- synonyms_df(synonyms(t$tsn[6:10], db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0 <- synonyms_df(synonyms(unique(t$tsn), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0 <- synonyms_df(synonyms(unique(t$tsn), db = 'itis', ask=T))
for(i in t$tsn){
print(i)
print(synonyms_df(synonyms(unique(t$tsn), db = 'itis', ask=F)))
}
for(i in t$tsn){
print(i)
print(synonyms_df(synonyms(unique(t$tsn[i]), db = 'itis', ask=F)))
}
t$tsn[i]
t$tsn[i,]
t$tsn[1]
class(t$tsn)
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0 <- synonyms_df(synonyms(as.numeric(t$tsn), db = 'itis', ask=F))
for(i in t$tsn){
print(i)
print(synonyms(unique(t$tsn[i]), db = 'itis', ask=F))
}
print(synonyms(t$tsn[i]), db = 'itis', ask=F))
print(synonyms(t$tsn[i], db = 'itis', ask=F))
t$tsn
View(t)
sort(t$tsn))
sort(t$tsn)
for(i in sort(t$tsn)){
print(i)
# print(synonyms(t$tsn[i], db = 'itis', ask=F))
}
for(i in sort(t$tsn)){
print(i)
print(synonyms(t$tsn[i], db = 'itis', ask=F))
}
for(i in sort(t$tsn[1:5])){
print(i)
print(synonyms(t$tsn[i], db = 'itis', ask=F))
}
i
as.numeric(i)
print(synonyms(t$tsn[as.numeric(i)], db = 'itis', ask=F))
print(i)
for(i in sort(t$tsn[1:5])){
print(i)
# print(synonyms(t$tsn[as.numeric(i)], db = 'itis', ask=F))
}
for(i in sort(t$tsn[1:5])){
print(as.numeric(i))
# print(synonyms(t$tsn[as.numeric(i)], db = 'itis', ask=F))
}
for(i in sort(t$tsn[1:5])){
print(as.numeric(i))
print(synonyms(t$tsn[as.numeric(i)], db = 'itis', ask=F))
}
print(synonyms(t$tsn[as.numeric(i)], db = 'itis', ask=F))
synonyms(t$tsn[as.numeric(i)], db = 'itis', ask=F)
i
unique(t0$scientificName)
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0 <- synonyms_df(synonyms(as.numeric(t$tsn[1-25]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0 <- synonyms_df(synonyms(as.numeric(t$tsn[20-25]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0 <- synonyms_df(synonyms(as.numeric(t$tsn[20:25]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0 <- synonyms_df(synonyms(as.numeric(t$tsn[10:25]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0 <- synonyms_df(synonyms(as.numeric(t$tsn[1:25]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0 <- synonyms_df(synonyms(as.numeric(t$tsn[25:50]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[50:100]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[100:150]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[100]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[101]), db = 'itis', ask=F))
for(i in sort(t$tsn[100:105])){
print(as.numeric(i))
synonyms(t$tsn[as.numeric(i)], db = 'itis', ask=F)
}
cat(synonyms(t$tsn[as.numeric(i)], db = 'itis', ask=F))
print(synonyms(t$tsn[as.numeric(i)], db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[102]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[103]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[104]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[105]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[106]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[107]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[108]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[109]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[110]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[100:110]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[110:120]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[111]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[112]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[113]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[114]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[115]), db = 'itis', ask=F))
# find synonyms using function from the taxize library (make sure to have most recent build!)
# s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
synonyms_df(synonyms(as.numeric(t$tsn[116]), db = 'itis', ask=F))
t[116,]
t$tsn[116]
print(synonyms(167680, db = 'itis', ask=F))
t0[t0$scientificName=='Morone saxatilis',]
to[!t0$scientificName=='Morone saxatilis',]
t0[!t0$scientificName=='Morone saxatilis',]
t0 <- t0[!t0$scientificName=='Morone saxatilis',]
# drop names that aren't in the original search list or are 'accepted'. this speeds up synonym search time.
t <- t0[(t0$scientificName %in% sp_list | t0$nameUsage == 'accepted' | t0$nameUsage == 'valid'),]
# drop hybrids
t <- t[!t$scientificName %in% grep("X", t$scientificName, value = T, ignore.case = F),]
# drop one word terms...too general
t <- t[str_count(t$scientificName, pattern = '\\w+') > 1,]
# find synonyms using function from the taxize library (make sure to have most recent build!)
s0 <- suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
View(s0)
# make sure subspecies aren't included in synonym lists. can lead to erroneous results when using base names later
# variations are dropped (i.e. var.; ssp.; cv. and so on) but not NAs (indicate a lack of synonyms)
s0 <- s0[(str_count(s0$syn_name,'\\s') <= 2 | is.na(s0$syn_name)==T),]
if(!('acc_name' %in% colnames(s0))) s0$acc_name <- NA
# add accepted terms to synonym data frame
s <- s0 %>%
full_join(t[t$nameUsage=='accepted',], by=c('syn_tsn'='tsn')) %>%
full_join(t[t$nameUsage!='not accepted',], by=c('acc_tsn'='tsn')) %>%
mutate(scientificName = coalesce(scientificName.x, scientificName.y)) %>%
mutate(nameUsage = coalesce(nameUsage.x, nameUsage.y)) %>%
rowwise() %>%
mutate(ITISacceptedName = ifelse(nameUsage=='accepted' | nameUsage=='valid', word(scientificName,1,2,' '), NA),
synonym_base = ifelse(!is.null(syn_name), word(syn_name, 1, 2, ' '), NA)) %>%
mutate(ITISacceptedName = ifelse(is.na(ITISacceptedName),word(acc_name,1,2,' '), ITISacceptedName))
# simplify data frame, deduplicate, and double check that there aren't hybrids in the synonyms
sp_df <- s %>%
select(ITISacceptedName, synonym_base) %>%
unique()
View(sp_df)
citation('rfUtilities')
citation(rfUtilities)
install.packages("rfUtilities")
citation(rfUtilities)
citation('rfUtilities')
July29 = raster::brick("C:/Users/peder/Downloads/July29_stack.tif")
min(July29)
min(July29[1])
min(July29[2])
min = min(July29, na.rm = T)
min = min(raster::getValues(July29), na.rm = T)
min
min = min(raster::getValues(July29@data$July29_stack.1), na.rm = T)
July29@data$July29_stack.1
July29@data
raster::cellStats(July29)
raster::cellStats(July29, min)
raster::cellStats(July29,stat = "min")
raster::cellStats(July29,stat = "max")
July29[1]
July29[[1]]
min[1]
July29[[1]]-min[1]
plot(July29[[1]]-min[1])
raster::calc(x = July29[[1]], function(x) x - min[1])
test = raster::calc(x = July29[[1]], function(x) x - min[1])
plot(test)
test = raster::calc(x = July29[[1]], function(x) (x - min[1])/(max[1]-min[1]))
new = July29[[1]] - min[[1]] / (max[1]-min[1])
max = raster::cellStats(July29,stat = "max")
max[1]
max[1]-min[1]
list.files("C:/Users/peder/Documents/Evangelista_Lab/squirrelcreek/Peder/data/raster")
list.dirs("C:/Users/peder/Documents/Evangelista_Lab/squirrelcreek/Peder/data/raster")
dirs = list.dirs("C:/Users/peder/Documents/Evangelista_Lab/squirrelcreek/Peder/data/raster")
files = list.files(dirs[1])
files
dirs
dirs = grep(dirs, pattern = 'SR')
source('~/.active-rstudio-document', echo=TRUE)
dirs
dirs = list.dirs("C:/Users/peder/Documents/Evangelista_Lab/squirrelcreek/Peder/data/raster",)
dirs = grep(dirs, pattern = 'SR', value = T)
dirs
files = list.files(dirs[1])
files
files = list.files(dirs[1], pattern = '*SRB*.tif$')
files
files = list.files(dirs[1], pattern = '*SRB*')
files
files = list.files(dirs[1], pattern = '*SRB*')
files
files = list.files(dirs[1], pattern = '*(SRB)*')
files
files = list.files(dirs[1], pattern = '(*SRB*)')
files
files[2]
r = raster(files[2])
library(raster)
r = raster(files[2])
files = list.files(dirs[1], pattern = '(*SRB*)', full.names = T)
library(raster)
r = raster(files[2])
r
min(r)
cellStats(r, stat = min)
cellStats(r, max)
# Rescale to 0-1
r2 = (r - min)/(max - min)
max
min = cellStats(r, "min")
max = cellStats(r, "max")
max
min
# Rescale to 0-1
r2 = (r - min)/(max - min)
plot(r2)
tools::file_path_sans_ext(r)
tools::file_path_sans_ext(files[2])
writeRaster(paste0(tools::file_path_sans_ext(files[2]), '_rescale.tif', sep=''))
writeRaster(r2, paste0(tools::file_path_sans_ext(files[2]), '_rescale.tif', sep=''), overwrite=T)
for(d in dirs){
print(d)
}
for(d in dirs){
for(f in list.files(d, pattern = '(*SRB*)', full.names = T)){
print(f)
}
}
for(f in list.files(d[1], pattern = '(*SRB*)', full.names = T)){
print(f)
}
list.files(d[1], pattern = '(*SRB*)', full.names = T)
list.files(d[1], pattern = '*SR*', full.names = T)
list.files(d[1], pattern = '*SR[0-9]*', full.names = T)
list.files(d[1], pattern = '*SRB*', full.names = T)
list.files(d[2], pattern = '*SRB*', full.names = T)
list.files(d[3], pattern = '*SRB*', full.names = T)
list.files(dirs[3], pattern = '*SRB*', full.names = T)
list.files(dirs[3], pattern = '*SRB[0-9]*', full.names = T)
for(d in dirs){
for(f in list.files(d[1], pattern = '*SRB[0-9]*', full.names = T)){
print(f)
}
}
for(d in dirs){
for(f in list.files(d[1], pattern = '*SRB[0-9]*', full.names = T)){
print(basename(f))
}
}
library(raster)
dirs = list.dirs("C:/Users/peder/Documents/Evangelista_Lab/squirrelcreek/Peder/data/raster")
dirs = grep(dirs, pattern = 'SR', value = T)
for(d in dirs){
for(f in list.files(d[1], pattern = '*SRB[0-9]*', full.names = T)){
print(basename(f))
}
}
for(d in dirs){
for(f in list.files(d[1], pattern = '*SRB[0-9]*', full.names = T)){
print(basename(f))
r = raster(files[2])
min = cellStats(r, "min")
max = cellStats(r, "max")
# Rescale to 0-1
r2 = (r - min)/(max - min)
writeRaster(r2, paste0(tools::file_path_sans_ext(files[2]), '_rescale.tif', sep=''), overwrite=T)
}
}
list.files(d[1], pattern = '*SRB[0-9]*', full.names = T)
list.files(d[1], pattern = '*SRB[0-9]*')
list.files(d[1], pattern = '*SRB[0-9]*.tif$')
for(d in dirs){
for(f in list.files(d[1], pattern = '*SRB[0-9]*.tif$', full.names = T)){
print(basename(f))
r = raster(files[2])
min = cellStats(r, "min")
max = cellStats(r, "max")
# Rescale to 0-1
r2 = (r - min)/(max - min)
writeRaster(r2, paste0(tools::file_path_sans_ext(files[2]), '_rescale.tif', sep=''), overwrite=T)
}
}
install.packages("RStoolbox")
r = raster("C:/Users/peder/Downloads/July29_stack.tif")
r
r[[1]]
r1 = r[[1]]
r1
r1 = raster(r[[1]])
r1
writeRaster(r1, "C:/Users/peder/Downloads/test.tif")
r1 = raster(getValues(r[[1]]))
r = brick("C:/Users/peder/Downloads/July29_stack.tif")
r
r[[1]]
names(r) = c('B2','B3','B4','B5','B6','B7')
r
raster(r$B2)
r1  = raster(r$B2)
writeRaster(r1, "C:/Users/peder/Downloads/test.tif")
writeRaster(r$B2, "C:/Users/peder/Downloads/test.tif")
writeRaster(r$B2, "C:/Users/peder/Downloads/test.tif", overwrite=T)
lapply(r, FUN = min)
r[r@data$B2,]
raster(r[r@data$B2,])
raster(r[r@data=='B2',])
raster(r[r@data=='B2'])
r[[1]]
writeRaster(r[[1]], "C:/Users/peder/Downloads/test.tif", overwrite=T)
min = cellStats(r[[1]], "min")
min
max = cellStats(r[[1]], "max")
max
# Rescale to 0-1
r2 = (r[[1]] - min)/(max - min)
r2
writeRaster(r2, "C:/Users/peder/Downloads/test.tif", overwrite=T)
library(raster)
r = raster("C:/Users/peder/Documents/Evangelista_Lab/squirrelcreek/Using2018FieldData/ModelRuns/FieldData2018_gte30_MayJune/glm_2/glm_bin_map.tif")
r = raster("C:/Users/peder/Documents/Evangelista_Lab/squirrelcreek/Using2018FieldData/ModelRuns/FieldData2018_gte30_MayJune/glm_2/glm_bin_map.tif")
shp = read.csv("C:/Users/peder/Documents/Evangelista_Lab/squirrelcreek/Using2018FieldData/ModelRuns/FieldData2018_gte30_MayJune/glm_2/CovariateCorrelationOutputMDS_initial.csv")
shp = read.csv("C:/Users/peder/Documents/Evangelista_Lab/squirrelcreek/Using2018FieldData/ModelRuns/FieldData2018_gte30_MayJune/glm_2/CovariateCorrelationOutputMDS_initial.csv",
header = T, stringsAsFactors = F)
xy = read.csv("C:/Users/peder/Documents/Evangelista_Lab/squirrelcreek/Using2018FieldData/ModelRuns/FieldData2018_gte30_MayJune/glm_2/CovariateCorrelationOutputMDS_initial.csv",
header = T, stringsAsFactors = F)
xy[3:nrow(xy),[1:2]]
xy[3:nrow(xy),c(1:2)]
raster::extract(r, xy[3:nrow(xy),c(1:2)])
xy = xy[3:nrow(xy),c(1:2)]
class(xy$X)
as.numeric(xy)
as.numeric(xy$X)
xy$x = as.numeric(xy$X)
xy = read.csv("C:/Users/peder/Documents/Evangelista_Lab/squirrelcreek/Using2018FieldData/ModelRuns/FieldData2018_gte30_MayJune/glm_2/CovariateCorrelationOutputMDS_initial.csv",
header = T, stringsAsFactors = F)
xy = xy[3:nrow(xy),c(1:2)]
xy$X = as.numeric(xy$X)
xy$Y = as.numeric(xy$Y)
raster::extract(r, xy[3:nrow(xy),c(1:2)])
xy = read.csv("C:/Users/peder/Documents/Evangelista_Lab/squirrelcreek/Using2018FieldData/ModelRuns/FieldData2018_gte30_MayJune/glm_2/CovariateCorrelationOutputMDS_initial.csv",
header = T, stringsAsFactors = F)
xy
install.packages("ggplot2")
library(tidyverse)
install.packages("tidyverse")
tibble::
read.table("C:/Users/peder/Documents/USGS/Data/amurpeppervine/amurpeppervine_zonal.csv")
tibble::
read.table(file = "C:/Users/peder/Documents/USGS/Data/amurpeppervine/amurpeppervine_zonal.csv",
header=T)
tibble::
read.table(file = "C:/Users/peder/Documents/USGS/Data/amurpeppervine/amurpeppervine_zonal.csv",
header=T, sep=",")
tibble::
csv = read.table(file = "C:/Users/peder/Documents/USGS/Data/amurpeppervine/amurpeppervine_zonal.csv",
header=T, sep=",")
csv$est_suit_area_acre
class(csv$est_suit_area_acre)
class(csv$perc_suit)
csv$X
csv[,2:ncol(csv)]
tibble::
csv = as.tibble(read.table(file = "C:/Users/peder/Documents/USGS/Data/amurpeppervine/amurpeppervine_zonal.csv",
header=T, sep=","))
tibble::
csv = as_tibble(read.table(file = "C:/Users/peder/Documents/USGS/Data/amurpeppervine/amurpeppervine_zonal.csv",
header=T, sep=","))
library(tidyverse)
csv = as_tibble(read.table(file = "C:/Users/peder/Documents/USGS/Data/amurpeppervine/amurpeppervine_zonal.csv",
header=T, sep=","))
csv
as_tibble(read.table(file = "C:/Users/peder/Documents/USGS/Data/amurpeppervine/amurpeppervine_zonal.csv",
header=T, sep=",")) %>%
select(-X)
install.packages(c("DT", "flexdashboard", "kableExtra", "leaflet", "shiny", "shinydashboard", "shinyWidgets"))
as_tibble(read.table(file = "C:/Users/peder/Documents/USGS/Data/amurpeppervine/amurpeppervine_zonal.csv",
header=T, sep=",")) %>%
select(-X) %>%
mutate(Species = "Amur peppervine")
csv = as_tibble(read.table(file = "C:/Users/peder/Documents/USGS/Data/amurpeppervine/amurpeppervine_zonal.csv",
header=T, sep=",")) %>%
select(-X) %>%
mutate(Species = "Amur peppervine")
write.csv(csv, file = "C:/Users/peder/Documents/GitHub/Repositories/inhabit_sandbox/species/amurpeppervine/amurpeppervine_zonal.csv")
gsub("'", replacement = '', x = "Bishop's goutweed")
gsub("[^,;]+", replacement = '', x = "Bishop's goutweed")
gsub("[^']+", replacement = '', x = "Bishop's goutweed")
gsub("[^']", replacement = '', x = "Bishop's goutweed")
gsub("[a-z]", replacement = '', x = "Bishop's goutweed")
gsub("[a:z]", replacement = '', x = "Bishop's goutweed")
grep("[a-z]", replacement = '', x = "Bishop's goutweed")
grep("[a-z]", x = "Bishop's goutweed")
grep("[a-z]", x = "Bishop's goutweed", value = T)
gsub("'\\s", x = "Bishop's goutweed", value = T)
gsub("'\\s", replacement = '', x = "Bishop's goutweed")
gsub("\\s", replacement = '', x = "Bishop's goutweed")
gsub("\\s[']", replacement = '', x = "Bishop's goutweed")
gsub("\\s\'", replacement = '', x = "Bishop's goutweed")
gsub("\\s'", replacement = '', x = "Bishop's goutweed")
gsub("'", replacement = '', x = "Bishop's goutweed")
flatten(gsub("'", replacement = '', x = "Bishop's goutweed"))
collapse(gsub("'", replacement = '', x = "Bishop's goutweed"))
paste0((gsub("'", replacement = '', x = "Bishop's goutweed")),collapse = ' ')
paste0(gsub("'", replacement = '', x = "Bishop's goutweed"),collapse = ' ')
gsub(pattern = "\\s", '', gsub("'", replacement = '', x = "Bishop's goutweed"))
tolower(gsub(pattern = "\\s", '', gsub("'", replacement = '', x = "Bishop's goutweed")))
ead.table(file = "C:/Users/peder/Documents/USGS/Data/amurpeppervine/amurpeppervine_zonal.csv",
#            header=T, sep=",")
)
csv = as_tibble(read.table(file = "C:/Users/peder/Documents/USGS/Data/amurpeppervine/amurpeppervine_zonal.csv",
header=T, sep=","))
read.csv(file = "C:/Users/peder/Documents/USGS/Data/amurpeppervine/amurpeppervine_zonal.csv",
header=T, sep=",")
setwd("C:/Users/peder/Documents/GitHub/Repositories/inhabit_sandbox/species/")
list.files(path = './amurpeppervine/', pattern = 'zonal')
list.files(path = './amurpeppervine/', pattern = 'zonal', full.names = T)
